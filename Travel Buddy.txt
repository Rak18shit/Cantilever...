import React, { useState, useEffect } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, setDoc, getDoc, collection, onSnapshot, query, addDoc, updateDoc } from 'firebase/firestore';

// Placeholder SVG icons to replace react-icons
const MapPinIcon = (props) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M12 18s-4.5-5.5-4.5-9A4.5 4.5 0 0 1 12 4.5a4.5 4.5 0 0 1 4.5 4.5c0 3.5-4.5 9-4.5 9z"/><circle cx="12" cy="9" r="2.5"/></svg>;
const UsersIcon = (props) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M16 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>;
const UserPlusIcon = (props) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M16 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/><circle cx="12" cy="7" r="4"/><line x1="19" y1="8" x2="19" y2="14"/><line x1="22" y1="11" x2="16" y2="11"/></svg>;
const LogOutIcon = (props) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"/><polyline points="16 17 21 12 16 7"/><line x1="21" y1="12" x2="9" y2="12"/></svg>;
const ListChecksIcon = (props) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M12 11h9"/><path d="M16 6h5"/><path d="M16 16h5"/><circle cx="5" cy="6" r="1"/><circle cx="5" cy="11" r="1"/><circle cx="5" cy="16" r="1"/></svg>;
const PlusIcon = (props) => <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" {...props}><path d="M12 5v14"/><path d="M5 12h14"/></svg>;


const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

// Helper function to show a custom message instead of alert
function showCustomMessage(message) {
  const modal = document.createElement('div');
  modal.className = "fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-70 p-4";
  modal.innerHTML = `
    <div class="bg-gray-800 text-white p-6 rounded-lg shadow-2xl w-full max-w-sm text-center transform transition-all duration-300 scale-95 opacity-0">
      <p class="mb-4">${message}</p>
      <button class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-full transition-colors duration-200">OK</button>
    </div>
  `;
  document.body.appendChild(modal);
  requestAnimationFrame(() => {
    modal.querySelector('div').classList.remove('scale-95', 'opacity-0');
  });
  modal.querySelector('button').onclick = () => {
    modal.querySelector('div').classList.add('scale-95', 'opacity-0');
    setTimeout(() => modal.remove(), 300);
  };
}

function App() {
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [user, setUser] = useState(null);
  const [activeTab, setActiveTab] = useState('map');
  const [profiles, setProfiles] = useState([]);
  const [activities, setActivities] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isLoginMode, setIsLoginMode] = useState(true);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [authError, setAuthError] = useState('');
  const [newActivity, setNewActivity] = useState({
    name: '',
    description: '',
    location: '',
    participants: [],
    limit: 10,
  });

  // Firebase Initialization
  useEffect(() => {
    if (Object.keys(firebaseConfig).length > 0) {
      const app = initializeApp(firebaseConfig);
      const authInstance = getAuth(app);
      const dbInstance = getFirestore(app);
      setAuth(authInstance);
      setDb(dbInstance);

      onAuthStateChanged(authInstance, async (currentUser) => {
        if (currentUser) {
          setUser(currentUser);
          // Fetch user profile and save it if it doesn't exist
          const userRef = doc(dbInstance, `artifacts/${appId}/users/${currentUser.uid}/profile/main`);
          const userSnap = await getDoc(userRef);
          if (!userSnap.exists()) {
            await setDoc(userRef, {
              userId: currentUser.uid,
              email: currentUser.email,
              name: currentUser.email.split('@')[0],
              currentLocation: 'New York, USA', // Mock current location
              futureDestination: 'Paris, France', // Mock future destination
            });
          }
        } else {
          setUser(null);
        }
      });

      const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;
      if (initialAuthToken) {
        signInWithCustomToken(authInstance, initialAuthToken).catch(e => {
          console.error("Custom token sign-in failed:", e);
          signInAnonymously(authInstance);
        });
      } else {
        signInAnonymously(authInstance);
      }
    }
  }, []);

  // Firestore Listeners
  useEffect(() => {
    if (!db || !user) return;

    // Listen for real-time changes to user profiles
    const usersCollectionRef = collection(db, `artifacts/${appId}/users`);
    const qUsers = query(usersCollectionRef);
    const unsubscribeUsers = onSnapshot(qUsers, (snapshot) => {
      const userProfiles = [];
      snapshot.forEach(userDoc => {
        const profileRef = doc(userDoc.ref, 'profile', 'main');
        getDoc(profileRef).then(profileSnap => {
          if (profileSnap.exists()) {
            userProfiles.push(profileSnap.data());
            setProfiles([...userProfiles]); // Update state as profiles are fetched
          }
        });
      });
    });

    // Listen for real-time changes to public activities
    const publicActivitiesRef = collection(db, `artifacts/${appId}/public/data/activities`);
    const unsubscribeActivities = onSnapshot(publicActivitiesRef, (snapshot) => {
      const activitiesData = snapshot.docs.map(d => ({ id: d.id, ...d.data() }));
      setActivities(activitiesData);
    });

    return () => {
      unsubscribeUsers();
      unsubscribeActivities();
    };
  }, [db, user]);

  const handleAuth = async (e) => {
    e.preventDefault();
    setAuthError('');
    try {
      if (isLoginMode) {
        await signInWithEmailAndPassword(auth, email, password);
      } else {
        await createUserWithEmailAndPassword(auth, email, password);
      }
      setIsModalOpen(false);
    } catch (error) {
      setAuthError(error.message);
    }
  };

  const handleLogout = async () => {
    await signOut(auth);
  };

  const handleCreateActivity = async () => {
    if (!user) {
      showCustomMessage("You must be logged in to create an activity.");
      return;
    }
    if (newActivity.name === '' || newActivity.location === '') {
      showCustomMessage("Activity name and location are required.");
      return;
    }
    await addDoc(collection(db, `artifacts/${appId}/public/data/activities`), {
      ...newActivity,
      creatorId: user.uid,
      creatorName: user.email.split('@')[0],
      createdAt: new Date(),
    });
    setNewActivity({ name: '', description: '', location: '', participants: [], limit: 10 });
    setActiveTab('activities');
    showCustomMessage("Activity created successfully!");
  };

  const handleJoinActivity = async (activityId) => {
    if (!user) {
      showCustomMessage("You must be logged in to join an activity.");
      return;
    }
    const activityRef = doc(db, `artifacts/${appId}/public/data/activities`, activityId);
    const activity = activities.find(a => a.id === activityId);
    if (activity.participants.length >= activity.limit) {
      showCustomMessage("This activity is full.");
      return;
    }
    if (activity.participants.includes(user.uid)) {
      showCustomMessage("You have already joined this activity.");
      return;
    }
    const updatedParticipants = [...activity.participants, user.uid];
    await updateDoc(activityRef, { participants: updatedParticipants });
    showCustomMessage("You have successfully joined the activity!");
  };

  const renderContent = () => {
    switch (activeTab) {
      case 'map':
        return (
          <div className="flex flex-col items-center">
            <h2 className="text-2xl font-semibold mb-4">Nearby Travelers</h2>
            <div className="w-full h-80 sm:h-96 md:h-[500px] bg-gray-700 rounded-xl shadow-lg relative overflow-hidden">
              <img
                src="https://placehold.co/1000x600/1F2937/FFFFFF?text=Simulated+Map"
                alt="Simulated Map"
                className="w-full h-full object-cover"
              />
              <div className="absolute top-4 left-4 p-2 bg-gray-900 rounded-lg shadow-lg">
                <p className="text-sm font-semibold">üìç Your Location: New York, USA</p>
              </div>
              <div className="absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 flex flex-col items-center">
                <div className="relative">
                  <span className="animate-ping absolute inline-flex h-full w-full rounded-full bg-blue-400 opacity-75"></span>
                  <MapPinIcon className="text-blue-500 w-10 h-10 relative" />
                </div>
                <p className="mt-2 font-semibold text-white">You</p>
              </div>
              <div className="absolute top-1/4 right-1/4 flex flex-col items-center">
                <MapPinIcon className="text-red-500 w-8 h-8" />
                <p className="mt-1 font-semibold text-white">Traveler</p>
              </div>
              <div className="absolute bottom-1/3 left-1/4 flex flex-col items-center">
                <MapPinIcon className="text-green-500 w-8 h-8" />
                <p className="mt-1 font-semibold text-white">Traveler</p>
              </div>
            </div>
            <div className="mt-8 w-full">
              <h3 className="text-xl font-semibold mb-4">Travelers with Overlapping Destinations</h3>
              {profiles.length > 0 ? (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                  {profiles.filter(p => p.futureDestination === 'Paris, France').map(profile => (
                    <div key={profile.userId} className="bg-gray-800 p-4 rounded-lg shadow-md flex items-center space-x-4">
                      <UserPlusIcon className="w-8 h-8 text-blue-400" />
                      <div>
                        <p className="font-semibold text-lg">{profile.name}</p>
                        <p className="text-sm text-gray-400">Destination: {profile.futureDestination}</p>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-center text-gray-500">No matching travelers found.</p>
              )}
            </div>
          </div>
        );
      case 'activities':
        return (
          <div className="w-full">
            <h2 className="text-2xl font-semibold mb-4">Upcoming Activities</h2>
            {activities.length > 0 ? (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {activities.map(activity => (
                  <div key={activity.id} className="bg-gray-800 p-6 rounded-xl shadow-lg flex flex-col">
                    <h3 className="text-xl font-bold mb-2">{activity.name}</h3>
                    <div className="flex items-center text-sm text-gray-400 mb-2">
                      <MapPinIcon className="w-4 h-4 mr-2" /> {activity.location}
                    </div>
                    <p className="text-gray-300 flex-grow mb-4">{activity.description}</p>
                    <div className="flex justify-between items-center text-sm text-gray-400 mb-4">
                      <div className="flex items-center">
                        <UsersIcon className="w-4 h-4 mr-1" />
                        <span>{activity.participants.length} / {activity.limit} Joined</span>
                      </div>
                    </div>
                    <button
                      onClick={() => handleJoinActivity(activity.id)}
                      disabled={activity.participants.includes(user?.uid) || activity.participants.length >= activity.limit}
                      className="mt-auto w-full py-2 px-4 rounded-full font-semibold transition-colors duration-200
                        bg-blue-600 hover:bg-blue-700 text-white disabled:bg-gray-700 disabled:text-gray-400 disabled:cursor-not-allowed"
                    >
                      {activity.participants.includes(user?.uid) ? 'Joined' : 'Join Activity'}
                    </button>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-center text-gray-500">No activities found. Create the first one!</p>
            )}
          </div>
        );
      case 'create':
        if (!user) {
          return (
            <div className="flex justify-center items-center h-64">
              <p className="text-xl text-gray-400">Please login to create an activity.</p>
            </div>
          );
        }
        return (
          <div className="w-full max-w-lg mx-auto bg-gray-800 p-6 rounded-xl shadow-lg">
            <h2 className="text-2xl font-semibold mb-4">Create a New Activity</h2>
            <form onSubmit={(e) => { e.preventDefault(); handleCreateActivity(); }} className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">Activity Name</label>
                <input
                  type="text"
                  value={newActivity.name}
                  onChange={(e) => setNewActivity({ ...newActivity, name: e.target.value })}
                  className="w-full p-3 bg-gray-700 rounded-lg border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">Location</label>
                <input
                  type="text"
                  value={newActivity.location}
                  onChange={(e) => setNewActivity({ ...newActivity, location: e.target.value })}
                  className="w-full p-3 bg-gray-700 rounded-lg border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="e.g., Central Park, NYC"
                  required
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-1">Description</label>
                <textarea
                  value={newActivity.description}
                  onChange={(e) => setNewActivity({ ...newActivity, description: e.target.value })}
                  rows="4"
                  className="w-full p-3 bg-gray-700 rounded-lg border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                  required
                ></textarea>
              </div>
              <button type="submit" className="w-full py-3 px-4 rounded-full bg-green-600 hover:bg-green-700 text-white font-semibold transition-colors duration-200">
                Create Activity
              </button>
            </form>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="font-sans antialiased bg-gray-950 text-gray-200 min-h-screen flex flex-col">
      <style>{`
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap');
        body { font-family: 'Inter', sans-serif; }
        .no-scrollbar::-webkit-scrollbar { display: none; }
        .no-scrollbar { -ms-overflow-style: none; scrollbar-width: none; }
      `}</style>

      {/* Header */}
      <header className="py-4 px-6 bg-gray-900 shadow-xl z-10 sticky top-0 flex justify-between items-center">
        <h1 className="text-3xl font-bold text-blue-400">TravelBuddy</h1>
        <div className="flex items-center space-x-4">
          {user && <span className="text-sm text-gray-400 hidden sm:block">Hello, {user.email.split('@')[0]}!</span>}
          {user ? (
            <button onClick={handleLogout} className="flex items-center text-sm px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-full transition-colors duration-200">
              <LogOutIcon className="mr-2 w-4 h-4" /> Logout
            </button>
          ) : (
            <button onClick={() => setIsModalOpen(true)} className="flex items-center text-sm px-4 py-2 bg-blue-600 hover:bg-blue-700 rounded-full transition-colors duration-200">
              <UserPlusIcon className="mr-2 w-4 h-4" /> Login
            </button>
          )}
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-grow p-4 md:p-8">
        <div className="container mx-auto">
          {renderContent()}
        </div>
      </main>

      {/* Bottom Navigation */}
      <nav className="fixed bottom-0 left-0 right-0 bg-gray-900 border-t border-gray-800 shadow-inner z-20">
        <div className="flex justify-around items-center h-16">
          <button onClick={() => setActiveTab('map')} className={`flex flex-col items-center text-sm transition-transform transform hover:scale-110 ${activeTab === 'map' ? 'text-blue-400' : 'text-gray-400'}`}>
            <MapPinIcon className="w-6 h-6 mb-1" />
            <span>Map</span>
          </button>
          <button onClick={() => setActiveTab('activities')} className={`flex flex-col items-center text-sm transition-transform transform hover:scale-110 ${activeTab === 'activities' ? 'text-blue-400' : 'text-gray-400'}`}>
            <ListChecksIcon className="w-6 h-6 mb-1" />
            <span>Activities</span>
          </button>
          <button onClick={() => setActiveTab('create')} className={`flex flex-col items-center text-sm transition-transform transform hover:scale-110 ${activeTab === 'create' ? 'text-blue-400' : 'text-gray-400'}`}>
            <PlusIcon className="w-6 h-6 mb-1" />
            <span>Create</span>
          </button>
        </div>
      </nav>

      {/* Auth Modal */}
      {isModalOpen && (
        <div className="fixed inset-0 z-50 flex items-center justify-center bg-gray-900 bg-opacity-70 p-4">
          <div className="bg-gray-800 p-8 rounded-lg shadow-2xl w-full max-w-sm transform transition-all duration-300 scale-100 opacity-100">
            <h2 className="text-2xl font-bold text-center mb-6">
              {isLoginMode ? 'Login' : 'Sign Up'}
            </h2>
            {authError && <div className="p-3 mb-4 text-sm text-center text-red-300 bg-red-900 rounded-lg">{authError}</div>}
            <form onSubmit={handleAuth} className="space-y-4">
              <input
                type="email"
                placeholder="Email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="w-full p-3 rounded-lg bg-gray-700 text-gray-200 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />
              <input
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="w-full p-3 rounded-lg bg-gray-700 text-gray-200 border border-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
                required
              />
              <button type="submit" className="w-full py-3 bg-blue-600 hover:bg-blue-700 text-white font-semibold rounded-lg transition-colors duration-200">
                {isLoginMode ? 'Login' : 'Sign Up'}
              </button>
            </form>
            <div className="flex justify-between mt-4 text-sm">
              <button onClick={() => setIsLoginMode(!isLoginMode)} className="text-blue-400 hover:underline">
                {isLoginMode ? 'Create an account?' : 'Already have an account?'}
              </button>
              <button onClick={() => setIsModalOpen(false)} className="text-gray-400 hover:underline">Close</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}

export default App;
